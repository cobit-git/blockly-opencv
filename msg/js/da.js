// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "Tilføj Kommentar";
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Kan ikke slette variablen »%1« da den er en del af definitionen af funktionen »%2«";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Skift værdi:";
Blockly.Msg["CLEAN_UP"] = "Ryd op i blokke";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";  // untranslated
Blockly.Msg["COLLAPSE_ALL"] = "Fold blokkene sammen";
Blockly.Msg["COLLAPSE_BLOCK"] = "Fold blokken sammen";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "farve 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "farve 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";  // untranslated
Blockly.Msg["COLOUR_BLEND_RATIO"] = "i forholdet";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "bland";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Blander to farver sammen i et bestemt forhold (0.0 - 1.0).";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://da.wikipedia.org/wiki/Farve";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Vælg en farve fra paletten.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "tilfældig farve";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Vælg en tilfældig farve.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "blå";
Blockly.Msg["COLOUR_RGB_GREEN"] = "grøn";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";  // untranslated
Blockly.Msg["COLOUR_RGB_RED"] = "rød";
Blockly.Msg["COLOUR_RGB_TITLE"] = "farve med";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Lav en farve med den angivne mængde af rød, grøn og blå. Alle værdier skal være mellem 0 og 100.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "bryd ud af løkken";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "fortsæt med den næste gentagelse i løkken";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Bryd ud af den omgivende løkke.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Spring resten af denne løkke over, og fortsæt med den næste gentagelse.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Advarsel: Denne blok kan kun bruges i en løkke.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "for hvert element %1 i listen %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "For hvert element i en liste, sæt variablen '%1' til elementet, og udfør derefter nogle kommandoer.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg["CONTROLS_FOR_TITLE"] = "tæl med %1 fra %2 til %3 med %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Få variablen \"%1\" til at have værdierne fra startværdien til slutværdien, mens der tælles med det angivne interval, og udfør de angivne blokke.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Tilføj en betingelse til denne \"hvis\" blok.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Tilføj en sidste fang-alt betingelse, til denne \"hvis\" blok.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Tilføj, fjern eller byt om på rækkefølgen af delene for at konfigurere denne \"hvis\" blok.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "ellers";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "ellers hvis";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "hvis";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "Hvis en værdi er sand, så udfør nogle kommandoer.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "Hvis en værdi er sand, så udfør den første blok af kommandoer. Ellers udfør den anden blok af kommandoer.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "Hvis den første værdi er sand, så udfør den første blok af kommandoer.  Ellers, hvis den anden værdi er sand, så udfør den anden blok af kommandoer.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "Hvis den første værdi er sand, så udfør den første blok af kommandoer. Ellers, hvis den anden værdi er sand, så udfør den anden blok af kommandoer. Hvis ingen af værdierne er sande, så udfør den sidste blok af kommandoer.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://da.wikipedia.org/wiki/For-l%C3%B8kke";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "udfør";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "gentag %1 gange";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Udfør nogle kommandoer flere gange.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "gentag indtil";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "gentag sålænge";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Udfør nogle kommandoer, sålænge en værdi er falsk.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Udfør nogle kommandoer, sålænge en værdi er sand.";
Blockly.Msg["CV_ADD_IMAGE"] = "Add 2 images image1 %1 and image2 %2 save to %3";  // untranslated
Blockly.Msg["CV_ADD_IMAGE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_ADD_IMAGE_TOOLTIP"] = "Add 2 images (saturation operation)";  // untranslated
Blockly.Msg["CV_BASIC_CHG_PIXEL"] = "Change pixel value from image %1 X: %2 Y: %3 %4 as %5";  // untranslated
Blockly.Msg["CV_BASIC_CHG_PIXEL_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_BASIC_CHG_PIXEL_TOOLTIP"] = "Cahnge specified pixel RGB value";  // untranslated
Blockly.Msg["CV_BASIC_COPY_ROI"] = "Copy ROI %1 to image %2 start: %3 end: %4";  // untranslated
Blockly.Msg["CV_BASIC_COPY_ROI_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_BASIC_COPY_ROI_TOOLTIP"] = "Copy ROI image array to an specified area of the image ";  // untranslated
Blockly.Msg["CV_BASIC_END_ROI"] = "Y from %1 to %2";  // untranslated
Blockly.Msg["CV_BASIC_END_ROI_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_BASIC_END_ROI_TOOLTIP"] = "End point of ROI(region of interest)";  // untranslated
Blockly.Msg["CV_BASIC_GET_PINFO"] = "Get pixel color from image %1 X: %2 Y: %3 %4 blue %5 green %6 red %7";  // untranslated
Blockly.Msg["CV_BASIC_GET_PINFO_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_BASIC_GET_PINFO_TOOLTIP"] = "Get speified pixel RGB value";  // untranslated
Blockly.Msg["CV_BASIC_GET_ROI"] = "Get ROI(region of interest) from image: %1 with start %2 end %3 ROI image: %4";  // untranslated
Blockly.Msg["CV_BASIC_GET_ROI_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_BASIC_GET_ROI_TOOLTIP"] = "Get ROI(region of interest) of the image";  // untranslated
Blockly.Msg["CV_BASIC_GET_SIZE"] = "Get size of image %1 size: %2";  // untranslated
Blockly.Msg["CV_BASIC_GET_SIZE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_BASIC_GET_SIZE_TOOLTIP"] = "Get size of the image";  // untranslated
Blockly.Msg["CV_BASIC_RGB"] = "R %1 , G %2, B %3";  // untranslated
Blockly.Msg["CV_BASIC_RGB_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_BASIC_RGB_TOOLTIP"] = "RGB value";  // untranslated
Blockly.Msg["CV_BASIC_START_ROI"] = "X from %1 to %2";  // untranslated
Blockly.Msg["CV_BASIC_START_ROI_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_BASIC_START_ROI_TOOLTIP"] = "Start point of ROI(region of interest)";  // untranslated
Blockly.Msg["CV_BITWISE_AND"] = "Do bitwise AND operation image1 %1 and image2 %2 save to %3";  // untranslated
Blockly.Msg["CV_BITWISE_AND_TOOLTIP"] = "Bitwise AND operation of the 2 images";  // untranslated
Blockly.Msg["CV_BITWISE_NOT"] = "Do bitwise NOT operation to image %1 save to %2";  // untranslated
Blockly.Msg["CV_BITWISE_NOT_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_BITWISE_NOT_TOOLTIP"] = "Bitwise NOT operation of the image";  // untranslated
Blockly.Msg["CV_BITWISE_OR"] = "Do bitwise OR operation image1 %1 and image2 %2 save to %3";  // untranslated
Blockly.Msg["CV_BITWISE_OR_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_BITWISE_OR_TOOLTIP"] = "Bitwise OR operation of the 2 images";  // untranslated
Blockly.Msg["CV_CON_FEATURE_APPROX"] = "Get approximated curve of contour %1 with %2 save to %3";  // untranslated
Blockly.Msg["CV_CON_FEATURE_APPROX_CLOSED"] = "closed curve";  // untranslated
Blockly.Msg["CV_CON_FEATURE_APPROX_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CON_FEATURE_APPROX_OPEN"] = "non-closed curve";  // untranslated
Blockly.Msg["CV_CON_FEATURE_APPROX_TOOLTIP"] = "Get approximated curve of the contour";  // untranslated
Blockly.Msg["CV_CON_FEATURE_AREA"] = "Get area of contour %1 save to %2";  // untranslated
Blockly.Msg["CV_CON_FEATURE_AREA_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CON_FEATURE_AREA_TOOLTIP"] = "Get area of the contour";  // untranslated
Blockly.Msg["CV_CON_FEATURE_BOUNDING"] = "Draw rectangle to image %1 bounding the contour  %2 save to %3";  // untranslated
Blockly.Msg["CV_CON_FEATURE_BOUNDING_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CON_FEATURE_BOUNDING_TOOLTIP"] = "Draw rectangle which is bounding the contour outside";  // untranslated
Blockly.Msg["CV_CON_FEATURE_CENTER"] = "Get center of contour line %1 center X: %2 Y: %3";  // untranslated
Blockly.Msg["CV_CON_FEATURE_CENTER_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CON_FEATURE_CENTER_TOOLTIP"] = "Get center point of the contour";  // untranslated
Blockly.Msg["CV_CON_FEATURE_CONHULL"] = "Get convex hull curve from contour %1 save to %2";  // untranslated
Blockly.Msg["CV_CON_FEATURE_CONHULL_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CON_FEATURE_CONHULL_TOOLTIP"] = "Get convex hull curve of the contour";  // untranslated
Blockly.Msg["CV_CON_FEATURE_EX_POINT"] = "Get 4 extream points for contour %1 left %2 right %3 top %4 bottom %5";  // untranslated
Blockly.Msg["CV_CON_FEATURE_EX_POINT_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CON_FEATURE_EX_POINT_TOOLTIP"] = "Get 4 extream points for contour - left, right, bottom, top";  // untranslated
Blockly.Msg["CV_CON_FEATURE_FIT_ELLIPSE"] = "Draw ellipse curve to image %1 fitted for contour %2 save to %3";  // untranslated
Blockly.Msg["CV_CON_FEATURE_FIT_ELLIPSE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CON_FEATURE_FIT_ELLIPSE_TOOLTIP"] = "Draw ellipse curve fitted for contour";  // untranslated
Blockly.Msg["CV_CON_FEATURE_MIN_CIRCLE"] = "Draw minimum enclosing circle to image %1 for contour  %2 save to %3";  // untranslated
Blockly.Msg["CV_CON_FEATURE_MIN_CIRCLE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CON_FEATURE_MIN_CIRCLE_TOOLTIP"] = "Draw minimum area circle that enclose the contour";  // untranslated
Blockly.Msg["CV_CON_FEATURE_MIN_RECT"] = "Draw minimum area rectangle to image %1 for contour  %2 save to %3";  // untranslated
Blockly.Msg["CV_CON_FEATURE_MIN_RECT_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CON_FEATURE_MIN_RECT_TOOLTIP"] = "Draw rectangle which occupy minimum area of the contour";  // untranslated
Blockly.Msg["CV_CON_FEATURE_PERI"] = "Get perimeter of contour %1 with %2 save to %3";  // untranslated
Blockly.Msg["CV_CON_FEATURE_PERI_CLOSED"] = "closed curve";  // untranslated
Blockly.Msg["CV_CON_FEATURE_PERI_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CON_FEATURE_PERI_OPEN"] = "non-closed curve";  // untranslated
Blockly.Msg["CV_CON_FEATURE_PERI_TOOLTIP"] = "Get perimeter of the contour";  // untranslated
Blockly.Msg["CV_CREATE_CAPTURE_CAM"] = "Create videocapture %1 for camera %2";  // untranslated
Blockly.Msg["CV_CREATE_CAPTURE_CAM_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CREATE_CAPTURE_CAM_TOOLTIP"] = "Create video capture instance for read video image from camera ";  // untranslated
Blockly.Msg["CV_CREATE_CAPTURE_FILE"] = "Create videocapture %1 for file %2";  // untranslated
Blockly.Msg["CV_CREATE_CAPTURE_FILE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CREATE_CAPTURE_FILE_TOOLTIP"] = "Create video capture instance for read video image from video file ";  // untranslated
Blockly.Msg["CV_CVT_COLOR"] = "Convert color space of %1 image:  %2 with option %3 %4 and save to  %5";  // untranslated
Blockly.Msg["CV_CVT_COLOR_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_CVT_COLOR_TOOLTIP"] = "Convert color space of the image";  // untranslated
Blockly.Msg["CV_DESTROY_ALL_WINDOW"] = "Destroy all window";  // untranslated
Blockly.Msg["CV_DESTROY_ALL_WINDOW_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_DESTROY_ALL_WINDOW_TOOLTIP"] = "Close image display window";  // untranslated
Blockly.Msg["CV_DRAW_CENTER"] = "center: %1 , %2";  // untranslated
Blockly.Msg["CV_DRAW_CENTER_TOOLTIP"] = "Center point(tuple) for circle";  // untranslated
Blockly.Msg["CV_DRAW_CIRCLE"] = "Draw circle on image %1 center: %2 radian: %3 color: %4 %5 thick: %6";  // untranslated
Blockly.Msg["CV_DRAW_CIRCLE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_DRAW_CIRCLE_TOOLTIP"] = "Draw a circle on the image";  // untranslated
Blockly.Msg["CV_DRAW_CONTOUR"] = "Draw contours lines of index %3 on image: %1  from contour list %2 color: %4 thick: %5 save to %6";  // untranslated
Blockly.Msg["CV_DRAW_CONTOUR_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_DRAW_CONTOUR_TOOLTIP"] = "Draw contours lines on the image";  // untranslated
Blockly.Msg["CV_DRAW_CREATE_B_IMAGE"] = "Create black color image %1 x size: %2 y size: %3";  // untranslated
Blockly.Msg["CV_DRAW_CREATE_B_IMAGE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_DRAW_CREATE_B_IMAGE_TOOLTIP"] = "Create black color image using numpy with given pixel size";  // untranslated
Blockly.Msg["CV_DRAW_END"] = "end: %1 , %2";  // untranslated
Blockly.Msg["CV_DRAW_END_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_DRAW_END_TOOLTIP"] = "End point(tuple) for line or rectangle";  // untranslated
Blockly.Msg["CV_DRAW_LINE"] = "Draw line on image %1 start: %2 end: %3 color: %4 %5 thick: %6";  // untranslated
Blockly.Msg["CV_DRAW_LINE_TOOLTIP"] = "Draw a line on the image";  // untranslated
Blockly.Msg["CV_DRAW_LINE__HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_DRAW_PUT_TEXT"] = "Put text of %1 on image %2 origin: %3 scale: %4 %5 colour: %6";  // untranslated
Blockly.Msg["CV_DRAW_PUT_TEXT_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_DRAW_PUT_TEXT_TOOLTIP"] = "Put text on the image";  // untranslated
Blockly.Msg["CV_DRAW_RAD_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_DRAW_RECT"] = "Draw rectangle on image %1 start: %2 end: %3 color: %4 %5 thick: %6";  // untranslated
Blockly.Msg["CV_DRAW_RECT_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_DRAW_RECT_TOOLTIP"] = "Draw a rectangle on the image";  // untranslated
Blockly.Msg["CV_DRAW_START"] = "start: %1 , %2";  // untranslated
Blockly.Msg["CV_DRAW_START_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_DRAW_START_TOOLTIP"] = "Start point(tuple) for line, or rectangle";  // untranslated
Blockly.Msg["CV_DRAW_TEXT_ORG"] = "origin: %1 , %2";  // untranslated
Blockly.Msg["CV_DRAW_TEXT_ORG_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_DRAW_TEXT_ORG_TOOLTIP"] = "Origin point(tuple) for test input. Bottom-left corner";  // untranslated
Blockly.Msg["CV_EDGE_CANNY"] = "Detect edge of image %1 uisng Canny by hysteresis min %2 hysteresis max %3 save to %4";  // untranslated
Blockly.Msg["CV_EDGE_CANNY_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_EDGE_CANNY_TOOLTIP"] = "Detect edge of the image using Canny method";  // untranslated
Blockly.Msg["CV_FIND_CONTOUR"] = "Find all contour lines on image:  %1 mode: %2 %3 method:  %4 save to %5";  // untranslated
Blockly.Msg["CV_FIND_CONTOUR_ALL_1H"] = "all lines(2 hierachy)";  // untranslated
Blockly.Msg["CV_FIND_CONTOUR_ALL_AH"] = "all lines(all hierachy)";  // untranslated
Blockly.Msg["CV_FIND_CONTOUR_ALL_LINE"] = "all lines(no hierachy)";  // untranslated
Blockly.Msg["CV_FIND_CONTOUR_APP_NONE"] = "save all contours points";  // untranslated
Blockly.Msg["CV_FIND_CONTOUR_APP_SIMPLE"] = "save only effective points";  // untranslated
Blockly.Msg["CV_FIND_CONTOUR_APP_TC89KC05"] = "using TC89_KC05 algorithm";  // untranslated
Blockly.Msg["CV_FIND_CONTOUR_APP_TC89L1"] = "using TC89_L1 algorithm";  // untranslated
Blockly.Msg["CV_FIND_CONTOUR_EX_LINE"] = "external line only";  // untranslated
Blockly.Msg["CV_FIND_CONTOUR_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_FIND_CONTOUR_TOOLTIP"] = "Find all contour lines on the image";  // untranslated
Blockly.Msg["CV_GET_HUE_VALUE"] = "Get hue value for R %1 G %2 B %3 %4 and save to  %5";  // untranslated
Blockly.Msg["CV_GET_HUE_VALUE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_GET_HUE_VALUE_TOOLTIP"] = "With this block, the user can get hue value from specified RGB value";  // untranslated
Blockly.Msg["CV_IMAGE_READ"] = "Read image file  %1 %2 save to %3 %4 attribute %5";  // untranslated
Blockly.Msg["CV_IMAGE_READ_GRAYSCALE"] = "as gray scale";  // untranslated
Blockly.Msg["CV_IMAGE_READ_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_IMAGE_READ_TOOLTIP"] = "Read a image from image file";  // untranslated
Blockly.Msg["CV_IMAGE_READ_UNCHANGED"] = "unchanged";  // untranslated
Blockly.Msg["CV_IMAGE_READ_WITHOUT_ALPHA"] = "without alpha";  // untranslated
Blockly.Msg["CV_IMAGE_SHAPE"] = "Get info of image %1 info:  %2 %3 %4";  // untranslated
Blockly.Msg["CV_IMAGE_SHAPE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_IMAGE_SHAPE_TOOLTIP"] = "Get information of image shape - rows, columns, channels(e.g. RGB, BW)";  // untranslated
Blockly.Msg["CV_IMAGE_SHOW"] = "Show a image on window  name: %1 image: %2 %3";  // untranslated
Blockly.Msg["CV_IMAGE_SHOW_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_IMAGE_SHOW_TOOLTIP"] = "Show a image on window";  // untranslated
Blockly.Msg["CV_IMAGE_THERSH_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_IMAGE_THRESHOLD"] = "Get threshold-filtered image from  image %1 threshold value: %2 option %3 save to %4";  // untranslated
Blockly.Msg["CV_IMAGE_THRESH_ATTR_BINARY"] = "binary";  // untranslated
Blockly.Msg["CV_IMAGE_THRESH_ATTR_BINARY_INV"] = "binary inverse";  // untranslated
Blockly.Msg["CV_IMAGE_THRESH_ATTR_TOZERO"] = "to zero";  // untranslated
Blockly.Msg["CV_IMAGE_THRESH_ATTR_TOZERO_INV"] = "to zero inverse";  // untranslated
Blockly.Msg["CV_IMAGE_THRESH_ATTR_TRUNC"] = "truncation";  // untranslated
Blockly.Msg["CV_IMAGE_THRESH_TOOLTIP"] = "Get theshold filtered image from original image";  // untranslated
Blockly.Msg["CV_IMAGE_WRITE"] = "Save image %1 as %2";  // untranslated
Blockly.Msg["CV_IMAGE_WRITE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_IMAGE_WRITE_TOOLTIP"] = "Save image as image file";  // untranslated
Blockly.Msg["CV_IN_RANGE"] = "Get masked HSV image from  image %1 HSV low limit: %2 HSV upper limit:  %3 and save to  %4";  // untranslated
Blockly.Msg["CV_IN_RANGE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_IN_RANGE_TOOLTIP"] = "Get masked HSV imamge from upper HSV value and lower HSV value";  // untranslated
Blockly.Msg["CV_LOWER_LIMIT"] = "HSV color lower limit %1 H: %2 S: %3 V: %4";  // untranslated
Blockly.Msg["CV_LOWER_LIMIT_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_LOWER_LIMIT_TOOLTIP"] = "HSV lower limit value for cv2.inRange() function";  // untranslated
Blockly.Msg["CV_MORPH_DILATION"] = "Dilation of image: %1 fill up count: %2 save to %3";  // untranslated
Blockly.Msg["CV_MORPH_DILATION_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_MORPH_DILATION_TOOLTIP"] = "Perform dilation of the image to remove small vacant hole";  // untranslated
Blockly.Msg["CV_MORPH_ERODE"] = "erode the image: %1 run count: %2 save to %3";  // untranslated
Blockly.Msg["CV_MORPH_ERODE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_MORPH_ERODE_TOOLTIP"] = "Erode the image to remove small noisy object";  // untranslated
Blockly.Msg["CV_MORPH_MORPHEX"] = "Erode and do dilation of image: %1 with OP %2 save to %3";  // untranslated
Blockly.Msg["CV_MORPH_MORPHEX_BLACK"] = "black hat morphing";  // untranslated
Blockly.Msg["CV_MORPH_MORPHEX_CLOSE"] = "closed morphing";  // untranslated
Blockly.Msg["CV_MORPH_MORPHEX_GRAD"] = "gradient morphing";  // untranslated
Blockly.Msg["CV_MORPH_MORPHEX_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_MORPH_MORPHEX_OPEN"] = "open morphing";  // untranslated
Blockly.Msg["CV_MORPH_MORPHEX_TOOLTIP"] = "Perform erosion and dilaton of image to remove noisy small holes and objects";  // untranslated
Blockly.Msg["CV_MORPH_MORPHEX_TOPHAT"] = "top hat morphing";  // untranslated
Blockly.Msg["CV_SET_WID_HEI"] = "set %1 as %2 %3 from video capture: %4";  // untranslated
Blockly.Msg["CV_SET_WID_HEI_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_SET_WID_HEI_TOOLTIP"] = "Set image width size or height size";  // untranslated
Blockly.Msg["CV_TRANS_FLIP"] = "Flip image %1 direction %2 save to %3";  // untranslated
Blockly.Msg["CV_TRANS_FLIP_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_TRANS_FLIP_HORIZON"] = "horizontal";  // untranslated
Blockly.Msg["CV_TRANS_FLIP_TOOLTIP"] = "filp the image vertically or horizontally";  // untranslated
Blockly.Msg["CV_TRANS_FLIP_VERTICAL"] = "vertical";  // untranslated
Blockly.Msg["CV_TRANS_MOVE_IMG"] = "Move image %1 with X: %2 Y: %3 save to %4";  // untranslated
Blockly.Msg["CV_TRANS_MOVE_IMG_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_TRANS_MOVE_IMG_TOOLTIP"] = "Move the image vertically or horizontally";  // untranslated
Blockly.Msg["CV_TRANS_RESIZE"] = "Resize image  %1 with  X scale: %2 Y scale: %3 save to  %4";  // untranslated
Blockly.Msg["CV_TRANS_RESIZE_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_TRANS_RESIZE_TOOLTIP"] = "Scaling(resizing) the image";  // untranslated
Blockly.Msg["CV_TRANS_ROT_IMG"] = "Rotate image %1 by angle %2 scaling %3 save tp %4";  // untranslated
Blockly.Msg["CV_TRANS_ROT_IMG_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_TRANS_ROT_IMG_TOOLTIP"] = "Rotate the image";  // untranslated
Blockly.Msg["CV_UPPER_LIMIT"] = "HSV color upper limit %1 H: %2 S: %3 V: %4";  // untranslated
Blockly.Msg["CV_UPPER_LIMIT_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_UPPER_LIMIT_TOOLTIP"] = "HSV upper limit value for cv2.inRange() function";  // untranslated
Blockly.Msg["CV_VIDEO_CAPTURE_CAM"] = "Read video image: %1 %2 video capture %3 %4 %5";  // untranslated
Blockly.Msg["CV_VIDEO_CAPTURE_CAM_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_VIDEO_CAPTURE_CAM_TOOLTIP"] = "Read a image from video stream came from camera";  // untranslated
Blockly.Msg["CV_VIDEO_CAPTURE_URL"] = "Read video from URL: %1 copy to %2 %3 Using stream:  %4 %5 %6";  // untranslated
Blockly.Msg["CV_VIDEO_CAPTURE_URL_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_VIDEO_CAPTURE_URL_TOOLTIP"] = "Read a image from video stream came from URL";  // untranslated
Blockly.Msg["CV_VIDEO_WRITER"] = "Create video recoder: %1 file name: %2 resolution W: %3 H: %4";  // untranslated
Blockly.Msg["CV_VIDEO_WRITER_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_VIDEO_WRITER_TOOLTIP"] = "Crate video writer for video recording";  // untranslated
Blockly.Msg["CV_VIDEO_WRITER_WR"] = "Record video image %1 uisng video writer: %2";  // untranslated
Blockly.Msg["CV_VIDEO_WRITER_WR_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_VIDEO_WRITER_WR_TOOLTIP"] = "Recording current image to video file";  // untranslated
Blockly.Msg["CV_WAIT_KEY_NO_RET"] = "Wait key input during %1 milisecond";  // untranslated
Blockly.Msg["CV_WAIT_KEY_NO_RET_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_WAIT_KEY_NO_RET_TOOLTIP"] = "Wait a key input. If getting a key, finish showing image";  // untranslated
Blockly.Msg["CV_WAIT_KEY_RETURN"] = "Wait key during %1 milisecond %2 and if getting a key, save it to %3";  // untranslated
Blockly.Msg["CV_WAIT_KEY_RETURN_HELPURL"] = "http://cobit.kr";  // untranslated
Blockly.Msg["CV_WAIT_KEY_RETURN_TOOLTIP"] = "Wait a key input. If getting a key, finish showing image. And return key input.";  // untranslated
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Slet alle %1 blokke?";
Blockly.Msg["DELETE_BLOCK"] = "Slet blok";
Blockly.Msg["DELETE_VARIABLE"] = "Slet variablen »%1«";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Slet %1's brug af variablen »%2«?";
Blockly.Msg["DELETE_X_BLOCKS"] = "Slet %1 blokke";
Blockly.Msg["DISABLE_BLOCK"] = "Deaktivér blok";
Blockly.Msg["DUPLICATE_BLOCK"] = "Duplikér";
Blockly.Msg["DUPLICATE_COMMENT"] = "Duplikér Kommentar";
Blockly.Msg["ENABLE_BLOCK"] = "Aktivér blok";
Blockly.Msg["EXPAND_ALL"] = "Fold blokkene ud";
Blockly.Msg["EXPAND_BLOCK"] = "Fold blokken ud";
Blockly.Msg["EXTERNAL_INPUTS"] = "Udvendige inputs";
Blockly.Msg["HELP"] = "Hjælp";
Blockly.Msg["INLINE_INPUTS"] = "Indlejrede inputs";
Blockly.Msg["IOS_CANCEL"] = "Annuller";
Blockly.Msg["IOS_ERROR"] = "Fejl";
Blockly.Msg["IOS_OK"] = "O.k.";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Tilføj inddata";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Tillad udsagn";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "Denne funktion har duplikerede inddata.";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "INDDATA";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Tilføj";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Tilføj variabel";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Slet";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "Du kan ikke bruge et tomt variabelnavn.";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Omdøb";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Variabelnavn";
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "opret en tom liste";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returnerer en liste af længde 0, som ikke indeholder nogen data";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "liste";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Tilføj, fjern eller byt om på rækkefølgen af delene for at konfigurere denne blok.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "opret liste med";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Føj et element til listen.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Opret en liste med et vilkårligt antal elementer.";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "første";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# fra slutningen";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_GET"] = "hent";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "hent og fjern";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "sidste";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "tilfældig";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "fjern";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Returnerer det første element i en liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Returnerer elementet på den angivne position på en liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Returnerer den sidste element i en liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Returnerer et tilfældigt element i en liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Fjerner og returnerer det første element i en liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Fjerner og returnerer elementet på den angivne position på en liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Fjerner og returnerer det sidste element i en liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Fjerner og returnerer et tilfældigt element i en liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Fjerner det første element i en liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Fjerner elementet på den angivne position på en liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Fjerner sidste element i en liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Fjerner et tilfældigt element i en liste.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "til # fra slutningen";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "til #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "til sidste";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "hent underliste fra første";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "hent underliste fra # fra slutningen";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "hent underliste fra #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Opretter en kopi af den angivne del af en liste.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 er det sidste element.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 er det første element.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "find første forekomst af elementet";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "find sidste forekomst af elementet";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Returnerer indeks for første/sidste forekomst af elementet i listen. Returnerer %1, hvis elementet ikke kan findes.";
Blockly.Msg["LISTS_INLIST"] = "i listen";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 er tom";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Returnerer sand, hvis listen er tom.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg["LISTS_LENGTH_TITLE"] = "længden af %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Returnerer længden af en liste.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_REPEAT_TITLE"] = "opret liste med elementet %1 gentaget %2 gange";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Opretter en liste bestående af den givne værdi gentaget et bestemt antal gange.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";  // untranslated
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "vend %1 om";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Vend en kopi af en liste om.";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "som";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "indsæt ved";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "sæt";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Indsætter elementet i starten af en liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Indsætter elementet på den angivne position i en liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Føj elementet til slutningen af en liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Indsætter elementet tilfældigt i en liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Sætter det første element i en liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Sætter elementet på den angivne position i en liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Sætter det sidste element i en liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Sætter et tilfældigt element i en liste.";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "stigende";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "faldende";
Blockly.Msg["LISTS_SORT_TITLE"] = "sorter %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Sorter en kopi af en liste.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alfabetisk, ignorer store/små bogstaver";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "nummerorden";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alfabetisk";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "lav tekst til liste";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "lav liste til tekst";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Saml en liste af tekster til én tekst, der er adskilt af et skilletegn.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Bryd tekst op i en liste af tekster med brud ved hvert skilletegn.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "med skilletegn";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "falsk";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Returnerer enten sand eller falsk.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "sand";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://da.wikipedia.org/wiki/Ulighed_(matematik)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Returnere sand, hvis begge inputs er lig med hinanden.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Returnere sand, hvis det første input er større end det andet input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Returnere sand, hvis det første input er større end eller lig med det andet input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Returnere sand, hvis det første input er mindre end det andet input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Returnere sand, hvis det første input er mindre end eller lig med det andet input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Returnere sand, hvis begge inputs ikke er lig med hinanden.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "ikke %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Returnerer sand, hvis input er falsk. Returnerer falsk, hvis input er sandt.";
Blockly.Msg["LOGIC_NULL"] = "null";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Returnerer null.";
Blockly.Msg["LOGIC_OPERATION_AND"] = "og";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg["LOGIC_OPERATION_OR"] = "eller";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Returnere sand, hvis begge inputs er sande.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Returnere sand, hvis mindst et af inputtene er sande.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "hvis falsk";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "hvis sand";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Kontrollér betingelsen i 'test'. Hvis betingelsen er sand, returnér \"hvis sand\" værdien; ellers returnér \"hvis falsk\" værdien.";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://da.wikipedia.org/wiki/Aritmetik";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Returnere summen af de to tal.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Returnere kvotienten af de to tal.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Returnere forskellen mellem de to tal.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Returnere produktet af de to tal.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Returnere det første tal opløftet til potensen af det andet tal.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 af X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Return the arctangent of point (X, Y) in degrees from -180 to 180.";  // untranslated
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "skift %1 med %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Læg et tal til variablen '%1'.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://da.wikipedia.org/wiki/Matematisk_konstant";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Returnere en af de ofte brugte konstanter: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(2) (1.414…), sqrt(½) (0.707…) eller ∞ (uendeligt).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "begræns %1 til mellem %2 og %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Begræns et tal til at være mellem de angivne grænser (inklusiv).";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = ":";
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "er deleligt med";
Blockly.Msg["MATH_IS_EVEN"] = "er lige";
Blockly.Msg["MATH_IS_NEGATIVE"] = "er negativt";
Blockly.Msg["MATH_IS_ODD"] = "er ulige";
Blockly.Msg["MATH_IS_POSITIVE"] = "er positivt";
Blockly.Msg["MATH_IS_PRIME"] = "er et primtal";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Kontrollere, om et tal er lige, ulige, primtal, helt, positivt, negativt, eller om det er deleligt med bestemt tal. Returnere sandt eller falskt.";
Blockly.Msg["MATH_IS_WHOLE"] = "er helt";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://da.wikipedia.org/wiki/Modulo";
Blockly.Msg["MATH_MODULO_TITLE"] = "resten af %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Returner resten fra at dividere de to tal.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://da.wikipedia.org/wiki/Tal";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "Et tal.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";  // untranslated
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "gennemsnit af listen";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "største tal i listen";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "listens median";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "mindste tal i listen";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "listens typetal";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "tilfældigt element fra listen";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "standardafvigelsen for listen";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "summen af listen";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Returner gennemsnittet (middelværdien) af de numeriske værdier i listen.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Returner det største tal i listen.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Returner listens median.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Returner det mindste tal i listen.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Returner en liste over de mest almindelige elementer på listen.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Returner et tilfældigt element fra listen.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Returner standardafvigelsen for listen.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Returner summen af alle tal i listen.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";  // untranslated
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://da.wikipedia.org/wiki/Tilfældighedsgenerator";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "tilfældigt decimaltal (mellem 0 og 1)";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Returner et tilfældigt decimaltal mellem 0,0 (inklusiv) og 1,0 (eksklusiv).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://da.wikipedia.org/wiki/Tilfældighedsgenerator";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "tilfældigt heltal mellem %1 og %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Returner et tilfældigt heltal mellem de to angivne grænser (inklusiv).";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://da.wikipedia.org/wiki/Afrunding";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "afrund";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "rund ned";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "rund op";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Runde et tal op eller ned.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://da.wikipedia.org/wiki/Kvadratrod";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absolut";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "kvadratrod";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Returnere den absolutte værdi af et tal.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Returnere e til potensen af et tal.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Returnere den naturlige logaritme af et tal.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Returnere 10-talslogaritmen af et tal.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Returnere negationen af et tal.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Returnere 10 til potensen af et tal.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Returnere kvadratroden af et tal.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";  // untranslated
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";  // untranslated
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";  // untranslated
Blockly.Msg["MATH_TRIG_COS"] = "cos";  // untranslated
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://da.wikipedia.org/wiki/Trigonometrisk_funktion";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";  // untranslated
Blockly.Msg["MATH_TRIG_TAN"] = "tan";  // untranslated
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Returnere arcus cosinus af et tal.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Returnere arcus sinus af et tal.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Returnere arcus tangens af et tal.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Returnere cosinus af en vinkel (i grader).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Returnere sinus af en vinkel (i grader).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Returnere tangens af en vinkel (i grader).";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Opret farvevariabel ...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Opret nummervariabel ...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Opret strengvariabel ...";
Blockly.Msg["NEW_VARIABLE"] = "Opret variabel ...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "Navn til den nye variabel:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "Ny variabeltype:";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "tillad erklæringer";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "med:";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Kør den brugerdefinerede funktion '%1'.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Kør den brugerdefinerede funktion '%1' og brug dens returværdi.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "med:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Opret '%1'";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Beskriv denne funktion...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "gøre noget";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "for at";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Opretter en funktion der ikke har nogen returværdi.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "returnér";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Opretter en funktion der har en returværdi.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Advarsel: Denne funktion har dublerede parametre.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Markér funktionsdefinitionen";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "Hvis en værdi er sand, så returnér en anden værdi.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Advarsel: Denne blok kan kun anvendes inden for en funktionsdefinition.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "parameternavn:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Tilføj en parameter til funktionen.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "parametre";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Tilføje, fjerne eller ændre rækkefølgen af parametre til denne funktion.";
Blockly.Msg["REDO"] = "Omgør";
Blockly.Msg["REMOVE_COMMENT"] = "Fjern Kommentar";
Blockly.Msg["RENAME_VARIABLE"] = "Omdøb variabel...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Omdøb alle '%1' variabler til:";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_APPEND_TITLE"] = "til %1 tilføj tekst %2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Tilføj noget tekst til variablen '%1'.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "til små bogstaver";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "til Stort Begyndelsesbogstav";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "til STORE BOGSTAVER";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Returner en kopi af teksten hvor bogstaverne enten er udelukkende store eller små, eller hvor første bogstav i hvert ord er stort.";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "hent første bogstav";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "hent bogstav # fra slutningen";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "hent bogstav #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg["TEXT_CHARAT_LAST"] = "hent sidste bogstav";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "hent tilfældigt bogstav";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_CHARAT_TITLE"] = "i tekst %1 %2";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Returnerer bogstavet på den angivne placering.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";  // untranslated
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "tæl %1 i %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Tæl hvor mange gange noget tekst fremgår i en anden tekst.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Føj et element til teksten.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "sammenføj";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Tilføj, fjern eller byt om på rækkefølgen af delene for at konfigurere denne tekstblok.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "til bogstav # fra slutningen";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "til bogstav #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "til sidste bogstav";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "i teksten";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "hent delstreng fra første bogstav";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "hent delstreng fra bogstav # fra slutningen";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "hent delstreng fra bogstav #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Returnerer den angivne del af teksten.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "find første forekomst af teksten";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "find sidste forekomst af teksten";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "i tekst %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Returnerer indeks for første/sidste forekomst af første tekst i den anden tekst.  Returnerer %1, hvis teksten ikke kan findes.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 er tom";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Returnerer sand, hvis den angivne tekst er tom.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "lav en tekst med";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Lav et stykke tekst ved at sætte et antal elementer sammen.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_LENGTH_TITLE"] = "længden af %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Returnerer antallet af bogstaver (herunder mellemrum) i den angivne tekst.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg["TEXT_PRINT_TITLE"] = "skriv %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Skriv den angivne tekst, tal eller anden værdi.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Spørg brugeren efter et tal";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Spørg brugeren efter en tekst";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "spørg efter et tal med meddelelsen";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "spørg efter tekst med meddelelsen";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";  // untranslated
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "erstat %1 med %2 i %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Erstat alle forekomster af noget tekst i en anden tekst.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";  // untranslated
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "vend %1 om";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Vender rækkefølgen om for tegnene i teksten.";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://da.wikipedia.org/wiki/Tekststreng";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "En bogstav, et ord eller en linje med tekst.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "fjern mellemrum fra begge sider af";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "fjern mellemrum fra venstre side af";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "fjern mellemrum fra højre side af";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Returner en kopi af teksten med mellemrum fjernet fra den ene eller begge sider.";
Blockly.Msg["TODAY"] = "I dag";
Blockly.Msg["UNDO"] = "Fortryd";
Blockly.Msg["UNNAMED_KEY"] = "unavngivet";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "element";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Opret 'sæt %1'";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Returnerer værdien af denne variabel.";
Blockly.Msg["VARIABLES_SET"] = "sæt %1 til %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Opret 'hent %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Sætter denne variabel til at være lig med input.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "En variabel med navnet »%1« findes allerede.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "En variabel med navnet »%1« findes allerede for en anden type: »%2«.";
Blockly.Msg["WORKSPACE_ARIA_LABEL"] = "Blockly Workspace";  // untranslated
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Sig noget ...";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["CV_IMAGE_HUE"] = "210";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["CV_IMAGE_THRE_HUE"] = "330";
Blockly.Msg["CV_BASIC_OP_HUE"] = "160";
Blockly.Msg["CV_FIGURE_HUE"] = "230";
Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["CV_EDGE_DETECT_HUE"] = "210";
Blockly.Msg["CV_IMAGE_CONT_HUE"] = "80";
Blockly.Msg["LISTS_HUE"] = "260";
Blockly.Msg["CV_IMAGE_MORP_HUE"] = "290";
Blockly.Msg["CV_IMAGE_OP_HUE"] = "260";
Blockly.Msg["PROCEDURES_HUE"] = "290";
Blockly.Msg["CV_IMAGE_TRAN_HUE"] = "310";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";
Blockly.Msg["CV_CONTOUR_FIT_HUE"] = "230";
Blockly.Msg["CV_IMAGE_PRO_HUE"] = "20";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["CV_VIDEO_HUE"] = "120";
Blockly.Msg["COLOUR_HUE"] = "20";